AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TagKeyname:
    Description: Enter the value of tags.
    Type: String
    Default: raisetech
  S3BucketName:
    Description: Enter bucket name.
    Type: String
  DBInstanceID:
    Type: String
    Default: app-prod
  InstanceClass:
    Type: String
    Default: db.t3.micro
  DBEngineVersion:
    Type: String
  DBMasterUsername:
    NoEcho: "true"
    Description: Username for MySQL database access
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  MasterUserPassSSMParamKey:
    Type: AWS::SSM::Parameter::Name

Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-026b57f3c383c2eec
    us-west-1:
      HVM64: ami-09208e69ff3feb1db
    eu-central-1:
      HVM64: ami-05ff5eaef6149df49
    ap-southeast-1:
      HVM64: ami-0f62d9254ca98e1aa
    ap-northeast-1:
      HVM64: ami-078296f82eb463377

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
        - Key: Project
          Value: !Sub vpc-${TagKeyname}
  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: !Sub igw-${TagKeyname}
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref Igw

  PublicSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Sub public-subnet1a-${TagKeyname}
  PublicSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      VpcId: !Ref Vpc
      CidrBlock: 10.0.16.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: !Sub public-subnet1c-${TagKeyname}
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      VpcId: !Ref Vpc
      CidrBlock: 10.0.128.0/20
      Tags:
        - Key: Project
          Value: !Sub private-subnet1a-${TagKeyname}
  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ""
      VpcId: !Ref Vpc
      CidrBlock: 10.0.144.0/20
      Tags:
        - Key: Project
          Value: !Sub private-subnet1c-${TagKeyname}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Project
          Value: !Sub public-rtb-${TagKeyname}
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw
  PublicSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1a
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1c
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Project
          Value: !Sub private-rtb-${TagKeyname}
  PrivateSubnet1aRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet1cRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1c
      RouteTableId: !Ref PrivateRouteTable

  # Keypair
  CFnKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: CFnKeyPair
      KeyType: rsa
      Tags:
        - Key: Project
          Value: !Sub cfn-keypair-${TagKeyname}

  # Secueiry Groups
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: public-sg
      GroupDescription: "Enable SSH access via port 22 and enable HTTP access via ALB"
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: !Sub web-sg-${TagKeyname}
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http access"
      GroupName: alb-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: !Sub alb-sg-${TagKeyname}
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Enable access via port 3306"
      GroupName: private-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Project
          Value: !Sub db-sg-${TagKeyname}

  # EC2 Instance
  WebServerInstace:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref CFnKeyPair
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeleteOnTermination: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref WebSecurityGroup
          SubnetId: !Ref PublicSubnet1a
      Tags:
        - Key: Project
          Value: !Sub ec2-${TagKeyname}

  # Instance Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2Role

  # IAM Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Description: Role for the EC2 instance.
      ManagedPolicyArns:
        - !Ref S3ProgrammaticReadWriteAccess
      RoleName: !Join
        - ""
        - - !Ref AWS::Region
          - -ec2-role

  # IAM Managed Policy
  S3ProgrammaticReadWriteAccess:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: S3 read and write access.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
              - "s3:PutObject"
            Resource:
              - !GetAtt "S3Bucket.Arn"
              - !Sub "${S3Bucket.Arn}/*"

  # S3
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub ${S3BucketName}
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags:
        - Key: Project
          Value: !Sub s3-bucket-${TagKeyname}
      VersioningConfiguration:
        Status: Enabled
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Principal: "*"
            Resource: !Sub "${S3Bucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:PutObject"
              - "s3:ListBucket"
              - "s3:ListBucketVersions"
            Principal:
              AWS:
                - !GetAtt "EC2Role.Arn"
            Resource:
              - !GetAtt "S3Bucket.Arn"
              - !Sub "${S3Bucket.Arn}/*"

  # ALB
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1a
        - !Ref PublicSubnet1c
      Tags:
        - Key: Project
          Value: !Sub alb-${TagKeyname}
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Project
          Value: !Sub target-group-${TagKeyname}
      TargetType: instance
      Targets:
        - Id: !Ref WebServerInstace
      UnhealthyThresholdCount: 5
      VpcId: !Ref Vpc

  # RDS
  MySQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      BackupRetentionPeriod: 0
      CopyTagsToSnapshot: true
      DBInstanceClass: !Sub ${InstanceClass}
      DBInstanceIdentifier: !Sub ${DBInstanceID}
      DBParameterGroupName: !Ref DBParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: mysql
      EngineVersion: !Sub ${DBEngineVersion}
      MasterUserPassword: !Sub "{{resolve:ssm-secure:${MasterUserPassSSMParamKey}:1}}"
      MasterUsername: !Sub ${DBMasterUsername}
      MultiAZ: false
      OptionGroupName: !Ref OptionGroup
      PreferredMaintenanceWindow: sat:20:21-sat:20:51
      StorageEncrypted: true
      StorageType: gp2
      Tags:
        - Key: Project
          Value: !Sub db-${TagKeyname}
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
    DeletionPolicy: Delete

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: "DB parameter group for mysql 8.0"
      Family: MySQL8.0
      Parameters:
        time_zone: Asia/Tokyo
        character_set_client: utf8mb4
        character_set_database: utf8mb4
        character_set_server: utf8mb4
        character_set_connection: utf8mb4
        character_set_results: utf8mb4

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DB subnet group"
      DBSubnetGroupName: cfn-subnet-group
      SubnetIds:
        - !Ref PrivateSubnet1a
        - !Ref PrivateSubnet1c
      Tags:
        - Key: Project
          Value: !Sub subnet-group-${TagKeyname}

  OptionGroup:
    Type: AWS::RDS::OptionGroup
    Properties:
      EngineName: mysql
      MajorEngineVersion: "8.0"
      OptionConfigurations:
        - OptionName: MARIADB_AUDIT_PLUGIN
      OptionGroupDescription: "Option group for mysql 8.0"
      Tags:
        - Key: Project
          Value: !Sub option-group-${TagKeyname}
